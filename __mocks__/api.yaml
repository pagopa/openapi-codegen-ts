swagger: "2.0"
info:
  version: 1.0.0
  title: Test API
  description: Test API.
host: localhost
basePath: /api/v1
schemes:
  - https
securityDefinitions:
  bearerToken:
    type: apiKey
    name: Authorization
    in: header
    x-auth-scheme: bearer
  simpleToken:
    type: apiKey
    name: X-Functions-Key
    in: header
  customToken:
    type: apiKey
    name: custom-token
    in: header
paths:
  /test-auth-bearer:
    get:
      operationId: "testAuthBearer"
      security:
        - bearerToken: []
      parameters:
        - name: "qo"
          in: "query"
          required: false
          type: "string"
        - name: "qr"
          in: "query"
          required: true
          type: "string"
        - $ref: "#/parameters/PaginationRequest"
      responses:
        "200":
          description: "Will send `Authenticated`"
        "403":
          description: "You do not have necessary permissions for the resource"
  /test-simple-token:
    get:
      operationId: "testSimpleToken"
      security:
        - simpleToken: []
      parameters:
        - name: "qo"
          in: "query"
          required: false
          type: "string"
        - name: "qr"
          in: "query"
          required: true
          type: "string"
        - $ref: "#/parameters/PaginationRequest"
      responses:
        "200":
          description: "Will send `Authenticated`"
        "403":
          description: "You do not have necessary permissions for the resource"          
  /test-multiple-success:
    get:
      operationId: "testMultipleSuccess"
      responses:
        "200":
          description: "Will return a Message"
          schema:
            $ref: "#/definitions/Message"
        "202":
          description: "Will return just accepted"
        "403":
          description: "You do not have necessary permissions for the resource"
          schema:
            $ref: "#/definitions/OneOfTest"
        "404":
          description: "Not found"

  /test-file-upload:
    post:
      operationId: "testFileUpload"
      consumes:
        - multipart/form-data
      parameters:
        - name: "file"
          in: "formData"
          type: "file"
          required: true
      responses:
        "200":
          description: "File uploaded"
  /test-binary-file-upload:
    post:
      operationId: "testBinaryFileUpload"
      consumes:
        - multipart/form-data
      parameters:
        - name: "logo"
          in: "formData"
          format: "binary"
          type: "string"
          required: true
      responses:
        "200":
          description: "File uploaded"
  /test-binary-file-download:
    get:
      operationId: testBinaryFileDownload
      produces:
        - application/octet-stream
      responses:
        '200':
          description: Success
          schema:
            type: string
            format: binary
          examples:
            value: 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
  /test-response-header:
    get:
      operationId: "testResponseHeader"
      responses:
        "201":
          description: "Will create a Message"
          schema:
            $ref: "#/definitions/Message"
          headers:
            Location:
              type: string
            Id:
              type: string
        "500":
          description: "Fatal error"

  /test-parameter-with-reference:
    post:
      operationId: "testParameterWithReference"
      parameters:
        - name: request-id
          in: query
          schema:
            $ref: "#/parameters/RequestId"
      responses:
        "201":
          description: "Created"
        "500":
          description: "Fatal error"   

  /test-parameter-with-body-ref:
    post:
      operationId: "testParameterWithBodyReference"
      parameters:
        - name: body
          in: body
          schema:
            $ref: "#/definitions/NewModel"
      responses:
        "201":
          description: "Created"
        "500":
          description: "Fatal error"   
  /put-test-parameter-with-body-ref:
    put:
      operationId: "putTestParameterWithBodyReference"
      parameters:
        - name: body
          in: body
          schema:
            $ref: "#/definitions/NewModel"
      responses:
        "201":
          description: "Created"
        "500":
          description: "Fatal error"   
          
  /test-parameter-with-dash/{path-param}:
    get:
      operationId: "testParameterWithDash"
      parameters:
        - name: path-param
          in: path
          type: string
        - name: foo-bar
          in: query
          type: string
        - name: headerInlineParam
          in: header
          type: string
          required: true
        - $ref: "#/parameters/RequestId"
        - $ref: "#/parameters/HeaderParamWithReference"
      responses:
        "200":
          description: "Ok"
        "500":
          description: "Fatal error" 
  /test-parameter-with-dash-and_underscore/{path-param}:
    get:
      operationId: "testParameterWithDashAnUnderscore"
      parameters:
        - name: path-param
          in: path
          type: string
        - name: foo_bar
          in: query
          type: string
        - name: headerInlineParam
          in: header
          type: string
          required: true
        - $ref: "#/parameters/RequestId"
        - $ref: "#/parameters/HeaderParamWithReference"
      responses:
        "200":
          description: "Ok"
        "500":
          description: "Fatal error"    
  /test-two-path-params/{first-param}/{second-param}:
    get:
      operationId: "testWithTwoParams"
      parameters:
        - name: first-param
          in: path
          type: string
        - name: second-param
          in: path
          type: string
      responses:
        "200":
          description: "Ok"
        "500":
          description: "Fatal error"  
  /test-path-level-parameter:
    parameters:
      - $ref: "#/parameters/RequiredRequestId"
      - $ref: "#/parameters/PaginationRequest"
    get:
      operationId: "testParametersAtPathLevel"
      description: when we declare parameters at path level
      responses:
        "200":
          description: "Ok"
        "500":
          description: "Fatal error"
  /test-simple:
    patch:
      operationId: "testSimplePatch"
      description: simply test of patch endpoint are considered
      responses:
        "200":
          description: "Ok"
        "500":
          description: "Fatal error"
  /test-custom-token-header:
    get:
      operationId: "testCustomTokenHeader"
      security:
        - customToken: []
      parameters: []
      responses:
        "200":
          description: "Will send `Authenticated`"
        "403":
          description: "You do not have necessary permissions for the resource"
  /test-with-empty-response:
    get:
      operationId: "testWithEmptyResponse"
      responses:
        "200":
          $ref: "#/responses/NotFound"
  /test-redirect-response-header:
    post:
      operationId: "testRedirectResponseHeader"
      responses:
        "302":
          description: "redirect to location"
          headers:
            Location:
              type: string
        "500":
          description: "Fatal error"       
definitions:
  Person:
    $ref: "definitions.yaml#/Person"
  Book:
    $ref: "definitions.yaml#/Book"
  AllOfTest:
    allOf:
      - type: object
        properties:
          items:
            type: array
            items:
              $ref: "#/definitions/Message"
      - $ref: "#/definitions/PaginationResponse"
  AllOfWithOneElementTest:
    description: test if we can use allOf with just one element inside
    allOf:
      - type: object
        properties:
          key:
            type: string
  AllOfWithOneRefElementTest:
    description: test if we can use allOf with just one ref element inside
    allOf:
      - $ref: "#/definitions/Profile"
  AllOfWithXExtensibleEnum:
    description: test if allOf with x-extensible-enum works fine 
    allOf:
      - $ref: "#/definitions/Profile"
      - type: object
        properties:
          status:
            type: string
            x-extensible-enum:
              - ACTIVATED
        required:
          - status
  AllOfOneOfTest:
    description: test if we can use allOf as oneOf
    x-one-of: true
    allOf:
      - type: object
        properties:
          items:
            type: array
            items:
              $ref: "#/definitions/Message"
      - $ref: "#/definitions/PaginationResponse"
  OneOfTest:
    oneOf:
      - type: object
        properties:
          limited:
            type: boolean
      - type: object
        properties:
          unlimited:
            type: boolean
  AdditionalPropsTest:
    type: object
    additionalProperties:
      type: array
      items:
        type: number
  AdditionalpropsDefault:
    type: object
    default: { "test": [1000] }
    additionalProperties:
      type: array
      items:
        type: number
  AdditionalPropsTrueTest:
    type: object
    additionalProperties: true
  NonNegativeNumberTest:
    title: NonNegativeNumberTest
    type: number
    minimum: 0
  WithinRangeStringTest:
    title: WithinRangeStringTest
    type: string
    minLength: 8
    maxLength: 10
  WithinRangeNumberTest:
    title: WithinRangeNumberTest
    type: number
    minimum: 0
    maximum: 10
  WithinRangeExclusiveMinimumNumberTest:
    title: WithinRangeExclusiveMinimumNumberTest
    type: number
    minimum: 0
    exclusiveMinimum: true
    maximum: 10
  WithinRangeExclusiveMaximumNumberTest:
    title: WithinRangeExclusiveMaximumNumberTest
    type: number
    minimum: 0
    maximum: 10
    exclusiveMaximum: true    
  WithinRangeExclusiveMinMaxNumberTest:
    title: WithinRangeExclusiveMinMaxNumberTest
    type: number
    minimum: 0
    exclusiveMinimum: true
    maximum: 10
    exclusiveMaximum: true
  WithinRangeExclusiveMinimumIntegerTest:
    title: WithinRangeExclusiveMinimumIntegerTest
    type: integer
    minimum: 0
    exclusiveMinimum: true
    maximum: 10
  WithinRangeExclusiveMaximumIntegerTest:
    title: WithinRangeExclusiveMaximumIntegerTest
    type: integer
    minimum: 0
    maximum: 10
    exclusiveMaximum: true    
  WithinRangeExclusiveMinMaxIntegerTest:
    title: WithinRangeExclusiveMinMaxIntegerTest
    type: number
    minimum: 0
    exclusiveMinimum: true
    maximum: 10
    exclusiveMaximum: true      
  InlinePropertyTest:
    type: object
    properties:
      inlineProp:
        type: string
        description: The device global unique identifier.
        pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
  CustomStringFormatTest:
    type: string
    x-import: '@pagopa/ts-commons/lib/strings'
    format: SomeCustomStringType
  OrganizationFiscalCode:
    type: string
    x-import: '@pagopa/ts-commons/lib/strings'
    format: OrganizationFiscalCode
  OrganizationFiscalCodeTest:
    type: string
    x-import: '@pagopa/ts-commons/lib/strings'
    format: OrganizationFiscalCode
  NonNegativeIntegerTest:
    title: NonNegativeIntegerTest
    type: integer
    minimum: 0
  WithinRangeIntegerTest:
    title: WithinRangeIntegerTest
    type: integer
    minimum: 0
    maximum: 10
  NestedObjectTest:
    type: object
    properties:
      inlineProp:
        type: string
        description: The device global unique identifier.
        pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
      nestedObject:
        type: object
        properties:
          inlineProp:
            type: string
            description: The device global unique identifier.
            pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
  EnumTest:
    type: object
    properties:
      status:
        type: string
        enum:
          - value1
          - value2
          - value3
  EnumTrueTest:
    type: object
    properties:
      flag:
        type: boolean
        enum:
          - true
  EnumFalseTest:
    type: object
    properties:
      flag:
        type: boolean
        enum:
          - false
  EnabledUserTest:
    type: object
    properties:
      description:
        type: string   
      enabled:
        type: boolean
        enum:
          - true
      username:
        type: string
    required:
      - enabled 
      - description
      - username
  DisabledUserTest:
    type: object
    properties:
      enabled:
        type: boolean
        enum:
          - false
      reason:
         type: string    
      username:
        type: string
    required:
      - enabled
      - reason 
      - username      
  DisjointUnionsUserTest: 
    x-one-of: true
    allOf:
      - $ref: "#/definitions/EnabledUserTest"
      - $ref: "#/definitions/DisabledUserTest"                 
  MessageContent:
    type: object
    properties:
      subject:
        $ref: "#/definitions/MessageSubject"
      markdown:
        $ref: "#/definitions/MessageBodyMarkdown"
    required:
      - markdown
  MessageSubject:
    type: string
    description: |-
      The (optional) subject of the message - note that only some notification
      channels support the display of a subject. When a subject is not provided,
      one gets generated from the client attributes.
    minLength: 10
    maxLength: 120
    example: Welcome new user !
  MessageBodyMarkdown:
    type: string
    description: |-
      The full version of the message, in plain text or Markdown format. The
      content of this field will be delivered to channels that don't have any
      limit in terms of content size (e.g. email, etc...).
    minLength: 80
    maxLength: 10000
    example: |-
      # This is a markdown header

      to show how easily markdown can be converted to **HTML**

      Remember: this has to be a long text.
  FiscalCode:   
    type: string
    description: User's fiscal code.
    pattern: "^[A-Z]{6}[0-9LMNPQRSTUV]{2}[ABCDEHLMPRST][0-9LMNPQRSTUV]{2}[A-Z][0-9LMNPQRSTUV]{3}[A-Z]$"
    example: SPNDNL80R13C555X
  EmailAddress:
    type: string
    format: email
    example: foobar@example.com
  ExtendedProfile:
    description: Describes the citizen's profile, mostly interesting for preferences attributes.
    type: object
    properties:
      email:
        $ref: "#/definitions/EmailAddress"
      preferred_languages:
        $ref: "#/definitions/PreferredLanguages"
      is_inbox_enabled:
        $ref: "#/definitions/IsInboxEnabled"
      is_webhook_enabled:
        $ref: "#/definitions/IsWebhookEnabled"
      version:
        type: integer
  LimitedProfile:
    description: Describes the citizen's profile, mostly interesting for preferences attributes.
    type: object
    properties:
      preferred_languages:
        $ref: "#/definitions/PreferredLanguages"
  PreferredLanguages:
    type: array
    items:
      $ref: "#/definitions/PreferredLanguage"
    description: Indicates the User's preferred written or spoken languages in order
      of preference. Generally used for selecting a localized User interface. Valid
      values are concatenation of the ISO 639-1 two letter language code, an underscore,
      and the ISO 3166-1 2 letter country code; e.g., 'en_US' specifies the language
      English and country US.
  PreferredLanguage:
    type: string
    x-extensible-enum:
      - it_IT
      - en_GB
      - es_ES
      - de_DE
      - fr_FR
    example: it_IT
  IsInboxEnabled:
    type: boolean
    default: false
    description: True if the recipient of a message wants to store its content for
      later retrieval.
  IsWebhookEnabled:
    type: boolean
    default: false
    description: True if the recipient of a message wants to forward the notifications to the default webhook.
  PaginationResponse:
    type: object
    description: Pagination response parameters.
    properties:
      page_size:
        type: integer
        minimum: 1
        description: Number of items returned for each page.
        example: 2
      next:
        type: string
        description: 'Contains an URL to GET the next #<page_size> results in the
          retrieved collection of items.'
        format: uri
        example: https://example.com/?p=0XXX2
  CreatedMessageWithContent:
    type: object
    properties:
      id:
        type: string
      fiscal_code:
        $ref: "#/definitions/FiscalCode"
      time_to_live:
        $ref: "#/definitions/TimeToLiveSeconds"
      content:
        $ref: "#/definitions/MessageContent"
      sender_service_id:
        type: string
    required:
      - fiscal_code
      - sender_service_id
  TimeToLiveSeconds:
    type: integer
    default: 3600
    minimum: 3600
    maximum: 604800
    description: This parameter specifies for how long (in seconds) the system will
      try to deliver the message to the channels configured by the user.
    example: 3600
  ServicePublic:
    title: Service (public)
    description: A Service associated to an user's subscription.
    type: object
    properties:
      service_id:
        $ref: "#/definitions/ServiceId"
      service_name:
        $ref: "#/definitions/ServiceName"
      organization_name:
        $ref: "#/definitions/OrganizationName"
      department_name:
        $ref: "#/definitions/DepartmentName"
      version:
        type: integer
    required:
      - service_id
      - service_name
      - organization_name
      - department_name
  ServiceId:
    type: string
    description: The ID of the Service. Equals the subscriptionId of a registered
      API user.
    minLength: 1
  ServiceName:
    type: string
    description: The name of the service. Will be added to the content of sent messages.
    minLength: 1
  OrganizationName:
    type: string
    description: The organization that runs the service. Will be added to the content
      of sent messages to identify the sender.
    minLength: 1
  DepartmentName:
    type: string
    description: The department inside the organization that runs the service. Will
      be added to the content of sent messages.
    minLength: 1
  Message:
    title: Message
    type: object
    properties:
      id:
        type: string
      content:
        $ref: "#/definitions/MessageContent"
      sender_service_id:
        type: string
    required:
      - id
      - content
  NewModel:
    title: NewModel
    type: object
    properties:
      id: 
        type: string
      name:
        type: string
    required:
      - id
      - name
  Profile:
    title: Profile
    description: Describes the user's profile.
    type: object
    properties:
      email:
        $ref: "#/definitions/EmailAddress"
      family_name:
        type: string
      fiscal_code:
        $ref: "#/definitions/FiscalCode"
      has_profile:
        type: boolean
      is_email_set:
        type: boolean
      is_inbox_enabled:
        $ref: "#/definitions/IsInboxEnabled"
      is_webhook_enabled:
        $ref: "#/definitions/IsWebhookEnabled"
      name:
        type: string
      preferred_email:
        $ref: "#/definitions/EmailAddress"
      preferred_languages:
        $ref: "#/definitions/PreferredLanguages"
      version:
        type: integer
      payload:
        type: object
        properties: {}
    required:
      - fiscal_code
      - family_name
      - has_profile
      - is_email_set
      - name
      - version
  DefinitionFieldWithDash:
    type: object
    properties:
      id-field:
        type: string
  ListOfReferences:
    description: |-
        a definition which is a list of references to other definitions.
    type: array
    items:
      $ref: "#/definitions/DefinitionFieldWithDash"
  ListOfDefinitions:
    description: |-
        a definition which is a list of other definitions.
    type: array
    items:
      type: object
      properties:
        field:
          type: string
  AnObjectWithAnItemsField:
    description: |-
      What if a object has a field named items?
      The case is an object like { items: [] }, which is legal
    type: object
    properties:
      items:
        type: array
        items:
          $ref: "#/definitions/DefinitionFieldWithDash"
    required:
      - items
responses:
  NotFound:
    description: Not found
    #content: {} #TODO
parameters:
  PaginationRequest:
    name: cursor
    in: query
    type: string
    minimum: 1
    description: An opaque identifier that points to the next item in the collection.
  RequestId:
    name: request-id
    in: query
    type: string
  RequiredRequestId:
    name: request-id
    in: query
    type: string
    required: true
  HeaderParamWithReference:
    name: x-header-param
    in: header
    description: A header param which has dashes in it
    type: string
    required: true
consumes:
  - application/json
produces:
  - application/json
