{%- import "macros.njk" as macro -%}

/** 
 * Do not edit this file it is auto-generated by io-utils / gen-api-models.
 * See https://github.com/pagopa/io-utils
 */
/* eslint-disable  */

import {
  RequestParams,
  TypeofApiCall,
  TypeofApiParams,
  createFetchRequestForApi,
  ReplaceRequestParams
} from "@pagopa/ts-commons/lib/requests";
import { identity } from "fp-ts/lib/function";

{% if operations | length %}
import {
{% for operation in operations %}
  {{ macro.requestTypeName(operation) }},
  {{ macro.responseDecoderName(operation) }},
{% endfor %}
} from "./requestTypes";
{% endif%}

// This is a placeholder for undefined when dealing with object keys
// Typescript doesn't perform well when narrowing a union type which includes string and undefined
// (example: "foo" | "bar" | undefined)
// We use this as a placeholder for type parameters indicating "no key"
type __UNDEFINED_KEY = "_____";

export type ApiOperation = {% for operation in operations %}
    {{ (" & " if loop.index0 else "") | safe }}
    TypeofApiCall<{{ macro.requestTypeName(operation) }}>
  {% endfor %};

export type ParamKeys = keyof({% for operation in operations %}
    {{ (" & " if loop.index0 else "") | safe }}
    TypeofApiParams<{{ macro.requestTypeName(operation) }}>
  {% endfor %});

/**
 * Defines an adapter for TypeofApiCall which omit one or more parameters in the signature
 * @param ApiT the type which defines the operation to expose
 * @param K the parameter to omit. undefined means no parameters will be omitted
 */
export type OmitApiCallParams<ApiT, K extends ParamKeys | __UNDEFINED_KEY = __UNDEFINED_KEY> = (
  op: TypeofApiCall<ApiT>
) => K extends __UNDEFINED_KEY
  ? TypeofApiCall<ApiT>
  : TypeofApiCall<ReplaceRequestParams<ApiT, Omit<RequestParams<ApiT>, K>>>;

/**
 * Defines an adapter for TypeofApiCall which omit one or more parameters in the signature
 * @param ApiT the type which defines the operation to expose
 * @param K the parameter to omit. undefined means no parameters will be omitted
 */
export type WithDefaultsT<
  K extends ParamKeys | __UNDEFINED_KEY = __UNDEFINED_KEY
> = OmitApiCallParams<{% for operation in operations %}{{ " | " if loop.index0 else "" }}{{ macro.requestTypeName(operation) }}{% endfor %}, K>



/**
 * Defines a collection of api operations 
 * @param K name of the parameters that the Clients masks from the operations
 */
export type Client<K extends ParamKeys | __UNDEFINED_KEY = __UNDEFINED_KEY> = K extends __UNDEFINED_KEY
? {
{% for operation in operations %}
  readonly {{ operation.operationId}}: TypeofApiCall<{{ macro.requestTypeName(operation) }}>;
{% endfor %}
}
: {
{% for operation in operations %}
  readonly {{ operation.operationId}}: TypeofApiCall<
    ReplaceRequestParams<{{ macro.requestTypeName(operation) }}, Omit<RequestParams<{{ macro.requestTypeName(operation) }}>, K>>
  >;
{% endfor %}
};

/**
 * Create an instance of a client
 * @param params hash map of parameters thata define the client:
 *  - baseUrl: the base url for every api call (required)
 *  - fetchApi: an implementation of the fetch() web API, depending on the platform (required)
 *  - basePath: optional path to be appended to the baseUrl
 *  - withDefaults: optional adapter to be applied to every operation, to omit some paramenters
 * @returns a collection of api operations
 */
export function createClient<K extends ParamKeys>(params: {
  baseUrl: string;
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  fetchApi: typeof fetch;
  withDefaults: WithDefaultsT<K>;
  basePath?: string;
}): Client<K>;
export function createClient(params: {
  baseUrl: string;
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  fetchApi: typeof fetch;
  withDefaults?: undefined;
  basePath?: string;
}): Client;
export function createClient<K extends ParamKeys>({
  baseUrl,
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  fetchApi,
  withDefaults,
  basePath = "{{ spec.basePath }}",
}: {
  baseUrl: string;
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  fetchApi: typeof fetch;
  withDefaults?: WithDefaultsT<K>;
  basePath?: string;
}) {
  const options = {
    baseUrl,
    fetchApi,
  };

  {% for operation in operations %}
  {% set headerParams = operation.parameters | paramIn("header") %}
  {% set bodyParams = operation.parameters | paramIn("body") %}
  {% set queryParams = operation.parameters | paramIn("query") %}
  {% set pathParams = operation.parameters | paramIn("path") %}
  {% set formParams = operation.parameters | paramIn("formData") %}

  const {{ operation.operationId }}T: {{ macro.requestParamsType(operation) }} = {
    method: "{{ operation.method }}",
    {% if headerParams | length or operation.consumes %}
    headers: {{ macro.composedHeaderProducers(headerParams, operation.consumes) }},
    {% else %}
    headers: () => ({}),
    {% endif %}
    response_decoder: {{ macro.responseDecoderName(operation) }}(),
    url: ({ {{ pathParams | pick("name") | stripQuestionMark | safeDestruct | join(', ') | safe  }} }) => `{{ macro.$("basePath") }}{{ macro.applyPathParams(operation.path, pathParams | pick("name") | stripQuestionMark) }}`,
    {% if bodyParams | length %}
    body: ({ {{ bodyParams | pick("name") | stripQuestionMark | safeDestruct | join(", ") | safe  }} }) => JSON.stringify({{ bodyParams | pick("name") | stripQuestionMark | safeIdentifier | join(", ") | safe  }}),
    {% elif formParams | length %}
    body: ({ {{ formParams | pick("name") | stripQuestionMark | safeDestruct | join(", ") | safe  }} }) => {{ formParams | pick("name") | safeIdentifier | first }}.uri,
    {% elif operation.method === "post" %}
    body: () => "{}",
    {% endif %}
    {% if queryParams | length %}
    query: ({ {{ queryParams | pick("name") | stripQuestionMark | safeDestruct | join(', ') | safe }} }) => ({ {{ queryParams | pick("name") | stripQuestionMark | safeDestruct | join(", ") | safe  }} }),
    {% else %}
    query: () => ({}),
    {% endif %}
  };
  const {{ operation.operationId }}: TypeofApiCall<{{ macro.requestTypeName(operation) }}> = createFetchRequestForApi({{ operation.operationId }}T, options);
  {% endfor %}

  return {
    {% for operation in operations %}{{ operation.operationId }}: (withDefaults || identity)({{ operation.operationId }}),{% endfor %}
  };
}

  
