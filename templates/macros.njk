{##
 # used when we want to export the main type / const from its own module file
 #}
{% macro exportConst(defaultValue, type, typedef, quote = false) %}
  {{- 'import * as t from "io-ts";' | addImport -}}
  {% if defaultValue !== undefined %}
    {{- 'import { withDefault } from "@pagopa/ts-commons/lib/types";' | addImport -}}
    {% set baseTypeName = type + "Base" %}
    export type {{ type }} = t.TypeOf<typeof {{ baseTypeName }}>;
    const {{ baseTypeName }} = {{ typedef | safe }};
    {% set q = '"' if quote else "" %}
    export const {{ type }} = withDefault({{ baseTypeName }}, {{ q | safe }}{{ defaultValue }}{{ q | safe }} as {{ type }});
  {% else %}
    export type {{ type }} = t.TypeOf<typeof {{ type }}>;
    export const {{ type }} = {{ typedef | safe }};
  {% endif %}
{% endmacro %}

{% macro printDefinitionName(name, schema) %}
  {% if schema.type == "object" %}
    {{ name }}
  {% elif schema.$ref %}
    {{ schema.$ref | splitBy("/") | last }}
  {% endif %}
{% endmacro%}

{##
 # used when we want to define a properties of an object
 # which is not exported in its own file / type (inlined)
 #}
{% macro inlineConst(defaultValue, type, typedef, quote = false) %}
  {% if defaultValue !== undefined %}
    {{- 'import { withDefault } from "@pagopa/ts-commons/lib/types";' | addImport -}}
    {# check if it is a primitive io-ts type (ie. t.string) #}
    {# if it is a primitive io-ts type, avoid to create an alias #}
    {% if not r/^t\.[a-z]+$/.test(typedef) %}
      {# create a type alias to set a default value #}
      {# this is mandatory as we need to cast the default value to this type #}
      {% set typeName = type | capitalizeFirst | camelCase %}
      {% set baseTypeName = typeName + "Base" %}
      {% set typeAlias %}t.TypeOf<typeof {{ baseTypeName }}>{% endset %}
      {% set typeAliasExport %}
        type {{ baseTypeName | safe }} = {{ typeAlias | safe }};
        const {{ baseTypeName | safe }} = {{ typedef | safe }};
      {% endset %}
      {{- typeAliasExport | addTypeAlias -}}
    {% endif %}
    {% set q = '"' if quote else "" %}
    withDefault({{ typedef if not baseTypeName else baseTypeName | safe }},
      {{ q | safe }}{{ defaultValue }}{{ q | safe }} {{ "as " + baseTypeName if baseTypeName else "" | safe }}),
  {% else %}
    {{ typedef | safe }},
  {% endif %}
{% endmacro %}

{##
 # convenience method used to choose between export or inlining a type definition
 #}
{% macro defineConst(defaultValue, type, typedef, quote = false, inline = false) -%}
  {% if inline -%}
    {{ inlineConst(defaultValue, type, typedef, quote) }}
  {% else %}
    {{ exportConst(defaultValue, type, typedef, quote) }}
  {% endif -%}
{% endmacro -%}

{##
 # convenience method used to import required modules
 # at the beginning of the type definition file
 #}
{% macro importLocalProp(realPropName) -%}
  {% set import -%}import { {{ realPropName }} } from "./{{ realPropName }}";{% endset -%}
  {{- import | addImport -}}
{% endmacro %}

{##
 # defines a number property with constraints
 #}
{% macro defineNumber(definitionName, definition, inline = false) -%}
  {% if definition.minimum != undefined and definition.maximum != undefined %}
    {{- 'import { IWithinRangeNumberTag, WithinRangeNumber } from "@pagopa/ts-commons/lib/numbers";' | addImport -}}
    {% if definition.minimum != undefined and definition.maximum != undefined %}
      {## [R,L)  #}
      {% if definition.exclusiveMaximum and not definition.exclusiveMinimum %}
        {% set typedef %}
          WithinRangeNumber<{{ definition.minimum }}, {{ definition.maximum }}, IWithinRangeNumberTag<{{ definition.minimum }}, {{ definition.maximum }}>>({{ definition.minimum }}, {{ definition.maximum }})
        {% endset %}
      {## (R,L]  #}  
      {% elif definition.exclusiveMinimum and not definition.exclusiveMaximum %}
        {% set typedef %}const WithoutExclusive = t.union([
          WithinRangeNumber<{{ definition.minimum }}, {{ definition.maximum }}, IWithinRangeNumberTag<{{ definition.minimum }}, {{ definition.maximum }}>>({{ definition.minimum }}, {{ definition.maximum }}),
          t.literal({{ definition.maximum }})
        ]){% endset %}
        {{ defineConst(undefined, 'WithoutExclusive', typedef, false, true) }}
        {% set typedef %}
        t.brand(
          WithoutExclusive,
          (
            n
          ): n is t.Branded<
            t.TypeOf<typeof WithoutExclusive>,
            { readonly {{ definitionName }}: symbol }
          > => n != {{ definition.minimum }},
          "{{definitionName}}"
        );
        {% endset %}
      {## (R,L)  #}
      {% elif definition.exclusiveMaximum and definition.exclusiveMinimum %}
        {% set typedef %}const WithoutExclusive = WithinRangeNumber<{{ definition.minimum }}, {{ definition.maximum }}, IWithinRangeNumberTag<{{ definition.minimum }}, {{ definition.maximum }}>>({{ definition.minimum }}, {{ definition.maximum }}){% endset %}
        {{ defineConst(undefined, 'WithoutExclusive', typedef, false, true) }}
        {% set typedef %}
        t.brand(
          WithoutExclusive,
          (
            n
          ): n is t.Branded<
            t.TypeOf<typeof WithoutExclusive>,
            { readonly {{ definitionName }}: symbol }
          > => n != {{ definition.minimum }},
          "{{definitionName}}"
        );
        {% endset %}
      {## [R,L]  #}  
      {% else %}
        {% set typedef %}t.union([
          WithinRangeNumber<{{ definition.minimum }}, {{ definition.maximum }}, IWithinRangeNumberTag<{{ definition.minimum }}, {{ definition.maximum }}>>({{ definition.minimum }}, {{ definition.maximum }}),
          t.literal({{ definition.maximum }})
        ]){% endset %}
      {% endif %}
    {% endif %}
  {% elif definition.minimum == "0" %}
    {{- 'import { NonNegativeNumber } from "@pagopa/ts-commons/lib/numbers";' | addImport -}}
    {% set typedef %}NonNegativeNumber{% endset %}
  {% else %}
    {% set typedef %}t.number{% endset %}
  {% endif %}
  {{ defineConst(definition.default, definitionName, typedef, false, inline) }}
{% endmacro -%}

{##
 # defines an integer property with constraints
 #}
{% macro defineInteger(definitionName, definition, inline = false) -%}
  {% if definition.minimum != undefined and definition.maximum != undefined %}
    {% set minimum = definition.minimum + 1 if definition.exclusiveMinimum else definition.minimum %}
    {% set maximum = definition.maximum - 1 if definition.exclusiveMaximum else definition.maximum %}
    {{- 'import { IWithinRangeIntegerTag, WithinRangeInteger } from "@pagopa/ts-commons/lib/numbers";' | addImport -}}
    {% set typedef %}t.union([
      WithinRangeInteger<{{ minimum }}, {{ maximum }}, IWithinRangeIntegerTag<{{ minimum }}, {{ maximum }}>>({{ minimum }}, {{ maximum }}),
      t.literal({{ maximum }})
    ]){% endset %}
  {% elif definition.minimum == "0" %}
    {{- 'import { NonNegativeInteger } from "@pagopa/ts-commons/lib/numbers";' | addImport -}}
    {% set typedef %}NonNegativeInteger{% endset %}
  {% else %}
    {% set typedef %}t.Integer{% endset %}
  {% endif %}
  {{ defineConst(definition.default, definitionName, typedef, false, inline) }}
{% endmacro -%}

{##
 # defines a string property with constraints
 #}
{% macro defineString(definitionName, definition, inline = false) -%}
    {% if definition.pattern %}
      {{- 'import { PatternString } from "@pagopa/ts-commons/lib/strings";' | addImport -}}
      {% set typedef %}PatternString("{{ definition.pattern | safe }}"){% endset %}
    {% elif definition.minLength and definition.maxLength %}
      {{- 'import { WithinRangeString } from "@pagopa/ts-commons/lib/strings";' | addImport -}}
      {% set maxLength = definition.maxLength + 1 %}
      {% set typedef %}WithinRangeString({{ definition.minLength }}, {{ maxLength }}){% endset %}
    {% elif definition.minLength == 1 %}
      {{- 'import { NonEmptyString } from "@pagopa/ts-commons/lib/strings";' | addImport -}}
      {% set typedef %}NonEmptyString{% endset %}
    {% elif definition.format == "email" %}
      {{- 'import { EmailString } from "@pagopa/ts-commons/lib/strings";' | addImport -}}
      {% set typedef %}EmailString{% endset %}
    {% elif definition.format == "date" %}
      {{- 'import { DateFromString } from "@pagopa/ts-commons/lib/dates";' | addImport -}}
      {% set typedef %}DateFromString{% endset %}
    {% elif definition.format == "date-time" %}
      {{- 'import { UTCISODateFromString } from "@pagopa/ts-commons/lib/dates";' | addImport -}}
      {% set typedef %}UTCISODateFromString{% endset %}
    {% elif definition.format != undefined and definition["x-import"] %}
      {% set typedef %}{{ definition.format }}T{% endset %}
      {% set importdef %}import { {{ definition.format }} as {{ typedef }} } from "{{ definition["x-import"] }}";{% endset %}
      {{- importdef | addImport -}}
    {% elif definition["enum"] %}
      {{- 'import { enumType } from "@pagopa/ts-commons/lib/types";' | addImport -}}
      {% set enumTypeAlias %}
        export enum {{ definitionName | capitalizeFirst }}Enum {
            {% for enum in definition["enum"] %}
              "{{ enum }}" = "{{ enum }}",
            {% endfor %}
        }
      {% endset %}
      {{- enumTypeAlias | addTypeAlias -}}
      {% set typedef %}enumType<{{ definitionName | capitalizeFirst }}Enum>(
        {{ definitionName | capitalizeFirst }}Enum,
        "{{ definitionName }}"
      ){% endset %}
    {% else %}
      {% set typedef %}t.string{% endset %}
    {% endif %}
    {{ defineConst(definition.default, definitionName, typedef, true, inline) }}
{% endmacro %}

{##
 # defines a boolean property
 #}
{% macro defineBoolean(definitionName, definition, inline = false) -%}
  {% if definition["enum"] and definition["enum"] | length == 1%}    
    {% set typedef %}t.literal({{definition["enum"][0]}}){% endset %}
  {% else %}
    {% set typedef %}t.boolean{% endset %}
  {% endif %}
  {{ defineConst(definition.default, definitionName, typedef, false, inline) }}
{% endmacro %}

{##
 # defines a $ref property
 #}
{% macro defineRef(definitionName, definition, inline = false) -%}
  {% set typedef %}{{ definitionName | splitBy("/") | last }}{% endset %}
  {{ defineConst(definition.default, typedef, typedef, false, inline) }}
{% endmacro %}

{##
 # defines an object sub-property
 #}
{% macro defineSubObject(parentPropName, definitionName, definition) -%}
  {% set typedef %}{{ parentPropName }}{{ definitionName | capitalizeFirst }}{% endset %}
  {{ defineConst(definition.default, definitionName, typedef, false, true) }}
{% endmacro %}

{##
 # defines an array property
 #}
{% macro defineArray(definitionName, definition, inline = false) -%}
  {{- 'import * as t from "io-ts";' | addImport -}}
  {% if definition.items.$ref %}
    {%- set realPropName = definition.items.$ref | splitBy("/") | last -%}
    {{ importLocalProp(realPropName) }}
    {% set typedef %}t.readonlyArray({{ realPropName }}, "array of {{ realPropName }}"){% endset %}
  {% else %}
    {%- set realPropName = definition.items.type | replace("integer", "number") -%}
    {% set typedef %}t.readonlyArray(t.{{ realPropName }}, "array of {{ realPropName }}"){% endset %}
  {% endif %}
  {{ defineConst(definition.default, definitionName, typedef, false, inline) }}
{% endmacro %}

{##
 # defines an object property of some prop.type
 #}
{% macro defineObjectProperty(propName, prop, parentPropName, camelCasedPropNames) -%}
  {% if propName %}
    {% if camelCasedPropNames %}
      "{{ propName | camelCase }}":
    {% else %}
      "{{ propName }}":
    {% endif %}
  {% endif %}
  {%- if prop.$ref %}
    {{ defineRef(prop.$ref, prop, true) }}
  {% elif prop.type == "object" %}
    {{ defineSubObject(parentPropName, propName, prop) }}
  {% elif prop.type == "array" %}
    {{ defineArray(propName, prop, true) }}
  {% elif prop.type == "number" %}
    {{ defineNumber(propName, prop, true) }}
  {% elif prop.type == "integer" %}
    {{ defineInteger(propName, prop, true) }}
  {% elif prop.type == "string" %}
    {{ defineString(propName, prop, true) }}
  {% elif prop.type == "boolean" %}
    {{ defineBoolean(propName, prop, true) }}
  {% else %}
    // TODO: generate model for definition "{{ propName }}: {{ prop.type }}"
  {% endif %}
{% endmacro %}

{##
 # convenience method to import required modules from $ref pointers
 #}
{% macro importLocalProps(definition) -%}
  {% set defaultFound = 0 %}
  {% for propName, prop in definition.properties -%}{%
    if prop.$ref -%}{%-
      set realPropName = prop.$ref | splitBy("/") | last -%}
      {{ importLocalProp(realPropName) }}{%
    elif prop.items.$ref -%}{%-
      set realPropName = prop.items.$ref | splitBy("/") | last -%}
      {{ importLocalProp(realPropName) }}{%
    endif %}{%
  endfor %}
  {% if definition.additionalProperties.$ref -%}{%-
      set realPropName = definition.additionalProperties.$ref | splitBy("/") | last -%}
      {{ importLocalProp(realPropName) }}{%
    elif definition.additionalProperties.items.$ref -%}{%-
      set realPropName = definition.additionalProperties.items.$ref | splitBy("/") | last -%}
      {{ importLocalProp(realPropName) }}{%
  endif %}
  {% for propName, prop in definition.properties -%}
    {% if prop.default !== undefined %}
      {{- 'import { withDefault } from "@pagopa/ts-commons/lib/types";' | addImport -}}
    {% endif %}
  {% endfor %}
{% endmacro -%}

{##
 # define object properties recursively,
 # supports additionaProperties, allOf and oneOf.
 #}
{% macro defineObject(definitionName, definition, strictInterfaces, camelCasedPropNames) -%}
  {{ importLocalProps(definition) }}
  {%- if definition.description %}
    {{ definition.description | comment | safe }}
  {% endif -%}

  {% if definition.type == "object" %}

    {{- 'import * as t from "io-ts";' | addImport -}}

    {% for propName, prop in definition.properties -%}
      {% if prop.type == "object" %}
        {% set composedPropName %}{{ definitionName }}{{ propName | capitalizeFirst }}{% endset %}
        {{ defineObject(composedPropName, prop, strictInterfaces, camelCasedPropNames) }}
      {% endif %}
    {% endfor %}

    {% if definition.additionalProperties %}
      // additional attributes
      {% if definition.additionalProperties == true -%}
        {% set typedef %}t.dictionary(t.string, t.any, "{{ definitionName }}"){% endset %}
      {% else %}
        {% set typedef %}t.dictionary(t.string,
          {{ defineObjectProperty(false, definition.additionalProperties, camelCasedPropNames) }} "{{ definitionName }}")
        {% endset %}
      {%- endif %}
      {% set defaultValue = definition.default | dump | safe if definition.default else undefined %}
      export const {{ definitionName }} = {{ inlineConst(defaultValue, definitionName, typedef, false) }};
    {% else %}
      // required attributes
      const {{ definitionName }}R = t.interface({
      {% for propName, prop in definition.properties -%}
        {% if definition.required and (definition.required | contains(propName)) %}
          {{ defineObjectProperty(propName, prop, definitionName, camelCasedPropNames) }}
        {% endif %}
      {% endfor %}
      });

      // optional attributes
      const {{ definitionName }}O = t.partial({
      {% for propName, prop in definition.properties -%}
        {% if (not definition.required) or (definition.required and not (definition.required | contains(propName))) %}
          {{ defineObjectProperty(propName, prop, definitionName, camelCasedPropNames) }}
        {% endif %}
      {% endfor %}
      });

      export const {{ definitionName }} = {% if strictInterfaces %}t.exact({% endif %}
        t.intersection(
        [
          {{ definitionName }}R,
          {{ definitionName }}O
        ],
        "{{ definitionName }}"
      ) {% if strictInterfaces %}){% endif %};
    {% endif %}

    export type {{ definitionName }} = t.TypeOf<typeof {{ definitionName }}>;

  {% elif definition.allOf %}

    {{- 'import * as t from "io-ts";' | addImport -}}

    {% for schema in definition.allOf -%}
      {% if schema.type == "object" %}
        {{ defineObject(definitionName + loop.index, schema, strictInterfaces, camelCasedPropNames) }}
      {% elif schema.$ref %}
        {%- set realPropName = schema.$ref | splitBy("/") | last -%}
        {{ importLocalProp(realPropName) }}
      {% endif %}
    {% endfor %}

    {% if definition.allOf.length > 1 %}
      export const {{ definitionName }} =
        t.intersection([
          {% for schema in definition.allOf -%}
            {{ printDefinitionName(definitionName + loop.index, schema) }},
          {% endfor %}
        ],
        "{{ definitionName }}"
      );
    {% else %}
      export const {{ definitionName }} =
      {{ printDefinitionName(definitionName + 1, definition.allOf[0]) }}
    {% endif %}

    export type {{ definitionName }} = t.TypeOf<typeof {{ definitionName }}>;

  {% elif definition.oneOf %}
    {% set oneOfProps = definition.oneOf if definition.oneOf else definition.allOf %}

    {{- 'import * as t from "io-ts";' | addImport -}}

    {% for schema in oneOfProps -%}
      {% if schema.type == "object" %}
        {{ defineObject(definitionName + loop.index, schema, strictInterfaces, camelCasedPropNames) }}
      {% elif schema.$ref %}
        {%- set realPropName = schema.$ref | splitBy("/") | last -%}
        {{ importLocalProp(realPropName) }}
      {% endif %}
    {% endfor %}

    export const {{ definitionName }} =
      t.union([
        {% for schema in oneOfProps -%}
          {% if schema.type == "object" %}
            {{ definitionName + loop.index }},
          {% elif schema.$ref %}
            {{ schema.$ref | splitBy("/") | last }},
          {% endif %}
        {% endfor %}
      ],
      "{{ definitionName }}"
    );

    export type {{ definitionName }} = t.TypeOf<typeof {{ definitionName }}>;

  {% elif definition.type == "number" %}

    {{ defineNumber(definitionName, definition) }}

  {% elif definition.type == "integer" %}

    {{ defineInteger(definitionName, definition) }}

  {% elif definition.type == "string" %}

    {{ defineString(definitionName, definition) }}

  {% elif definition.type == "boolean" %}

    {{ defineBoolean(definitionName, definition) }}

  {% elif definition.type == "array" %}

    {{ defineArray(definitionName, definition) }}

  {% else %}

    // TODO: generate model for definition "{{ definitionName }}: {{ prop.type }}"

  {% endif %}
{% endmacro -%}

{##
 # The composed request param type associated to an operation
 # example: { operationId: "myOp", ...rest } -> ReplaceRequestParams<MyOp,RequestParams<MyOp>>
 #}
{% macro requestParamsType(operation) -%}ReplaceRequestParams<{{ requestTypeName(operation) }},RequestParams<{{ requestTypeName(operation) }}>>{% endmacro %}

{##
 # The request type derived from operation data
 #}
{% macro requestTypeName(operation) -%}{{ operation.operationId | capitalizeFirst }}T{% endmacro %}

{##
 # The respose decoder name derived from operation data
 #}
{% macro responseDecoderName(operation) -%}{{ operation.operationId }}DefaultDecoder{% endmacro %}

{##
 # Given a path with parameters, it returns the path as a string template
 # example: /pet/{petId} -> /pet/${petId}
 #}
{% macro pathStringToTemplateString(path, cnt) -%}{{ path | replace("{", '${' + cnt + '["') | replace("}", '"]}') | safe }}{% endmacro %}

{##
 # Given a path with parameters and a list of parameters, it creates a string template
 # Params are sanitised to prevent the use of invalid identifiers. We assume that the scope in which the string template will be used has such variables declared
 # example: (/pet/{pet-id}, ["pet-id"]) -> /pet/${petId}
 #}
{% macro applyPathParams(path, pathParams) -%}{% set str = path %}{% for p in  pathParams %}{% set str = str | replace("{" + p + "}", "${" + p | safeIdentifier + "}" ) %}{% endfor %}{{ str }}{% endmacro %}

{##
 # Wraps an expression into "${" and "}" in string template literals. It is needed to escape the brackets usage in nunjucks
 # example: "foo" -> ${foo}
#}
{% macro $(str) -%}{% raw %}${{% endraw %}{{str}}{% raw %}}{% endraw %}{% endmacro %}


{##
 # Given an IAuthHeaderParamenterInfo, it renders token in the form expected by its type
 # If authScheme is passed for token of type apiKey, the schema will be applied to tokens
 # example: { name: 'token', headerName: 'Authorization', tokenType: 'apiKey' } -> token
 # example: { name: 'token', headerName: 'Authorization', tokenType: 'apiKey', authScheme: 'bearer' -> `Bearer ${token}`
 # example: { name: 'token', headerName: 'Authorization', tokenType: 'basic' } -> `Basic ${token}`
 # example: { name: 'token', headerName: 'Authorization' } -> token
 #}
{% macro tokenize(headerParam) -%}
{% if headerParam.tokenType === "apiKey" and headerParam.authScheme and headerParam.authScheme !== "none" %}
`{{ headerParam.authScheme | capitalizeFirst }} {{ $(headerParam.name | safeIdentifier) }}`
{% elif headerParam.tokenType === "oauth" %}
`Bearer {{ $(headerParam.name | safeIdentifier ) }}`
{% elif headerParam.tokenType === "basic" %}
`Basic {{ $(headerParam.name | safeIdentifier) }}
`{% else %}
{{ headerParam.name | safeIdentifier }}
{% endif %}
{% endmacro %}

{##
 # Given an array of IHeaderParamenterInfo, it renders a header producer that compose params into the desired set of headers
 # It also takes an optional "consumes" parameter, which is a MIME type for which eventualy generate a header producer
 # example: 
 # [ { name: 'token', headerName: 'Authorization' },
 #   { name: 'limit', headerName: 'x-page-limit' },
 #   { name: 'offset', headerName: 'x-page-offset' }]
 #    -> ({ token, limit, offset }) => ({ 
 #           "Authorization": token,
 #           "x-page-limit": limit,
 #           "x-page-offset": offset
 #       })
 #
 # example (with consumes):
 # [ { name: 'token', headerName: 'Authorization' },
 #   { name: 'limit', headerName: 'x-page-limit' }],
 # "application/json"
 #    -> ({ token, limit, offset }) => ({ 
 #           "Authorization": token,
 #           "x-page-limit": limit,
 #           "Content-Type": "application/json"
 #       })
 #
 #}
{% macro composedHeaderProducers(headerParams, consumes) -%}
  (
    {% if headerParams.length  %}
    { {% for p in headerParams %}{{p.name | safeDestruct | safe }},{% endfor %} }: 
    { {% for p in headerParams %}"{{p.name | safe }}":{{p.type}};{% endfor %} }
    {% endif %}
  ) => ({
    {% for p in headerParams %}"{{p.headerName}}": {{ tokenize(p) }},{% endfor %}
    {% if consumes %}"Content-Type": "{{ consumes }}"{% endif %}
  })
{% endmacro %}

{##
 # Given an IHeaderParamenterInfo, it renders an header producer that links the parameter name with expected header
 # example: { name: 'token', headerName: 'Authorization' } -> ({ token }) => ({ "Authorization": token })
 #}
{% macro requestParamsType(operation) -%}ReplaceRequestParams<{{ requestTypeName(operation) }},RequestParams<{{ requestTypeName(operation) }}>>{% endmacro %}
